task queue와 콜스택을 관찰하는 거 -> 이벤트 루프
프로세스가 동작하는 동안 루프를 돌면서 콜스택이 비워있다면 테스트큐에 있는 아이를 콜스택에 가져옴 
버튼에 클릭 리스너를 등록해 두면 웹 apis는이벤트 루프에 콜백함수를 큐에다 넣음 이벤트 루프는 콜스택이 비었을 때 
앞 함수가 다 수행되면 콜스택에 집어넣음
콜스택은 한번에 하나만 콜스택에 가져옴 


콜스택에서 수행되는 함수는 끝날 때까지 보장이 된다 
중간에 다른 태스크나 일들 할 수 없고 수행 중인 코드 끝날 때까지 실행되어진다 .

태스크큐 -> 지정된 이벤트 발생시 함수 쌓임
마이크로 태스크 큐 -> 프로미스함수가 다 수행된 이후에 수행되는 것 
프로미스 잘 끝나서 리졸브가 되면 마이크로 큐에 들어오게 된다 
렌더-> 주기적으로 브라우저에서 유저가 동작을 하면 주기적으로 화면에 업뎃 해주는거 
주기적으로 업뎃되는 순서 / 리퀘스트 애니메이션 큐 api를 사용하면 렌더 과정 작동 전에  애니매이션 큐에 차곡차곡 쌓이게 된다 

렌더,  마이크로테스트 큐, 테스크 큐 이렇게 여러개가 있는데 어떻게 브라우저에서 모든걸 순차적으로 잘 실행할 수 있는지 ?이벤트 루프는 반복문 처럼 계속 반복하는 것과 같다 매우 빠른 속도로 
평소에 돌다가 콜스택에 수행중 함수가 있으면 거기에 그대로 머물러 있음
콜스택에서 시간 오래걸리는 일 하게 되면 사용자의 화면에 업뎃이 되지 않는다 

함수가 끝나게 되면 다시 이벤트루프가 돌기 시작함 
렌더쪽으로 갈 수도 안갈 수도 있는데 이게 무슨 말 ?
60fps(16.7ms)가 걸린다. 사람눈에 애니매이션이 자연스러우려면 1초당 60개의 프레임이 필요함
그렇게 하기 위해선 16.7ms 동안 업뎃이 일어나야함 

이벤투 루프는 한바퀴 도는데 1ms도 걸리지 않음 그래서 매번 업뎃을 할 필요가 없다 
보통 렌더는 16.7ms 범위 안에서 한번 해주는데 그래서 될 수도 안될 수도 있다고 한것 
다른 일을하다가 시간이 됐다 싶음 렌더트리 업뎃 다시 돌다가 나중에 업뎃 하는 방식으로 운영되고 있다
아까 렌더를 업뎃 했으면 다음 단계로 넘어가게 된다 안들리고 마이크로 큐로 
만약 콜백에 마이크로 큐에서 온 애들이 들어있는데 또 다시 다른게 마이크로로 들어온다면 나중에 들어온 거 까지 다 
포함해서 콜스택이 비어있을 때 넣게 되고 그거까지 다 실행을 해줘야 태스크 큐로넘어갈수 있다
태스크 큐에서는 한번에 딱 하나 아이템을 콜스택으로 가져옴 
마이크로는 새로운거 까지 기다렸지만 태스크에서는 콜 스택으로 아이템 하나만 들어오고 
그거 끝날 때까지 기다린담에 이벤트 루프가 다시 순회를 시작함
마지막 태스트 큐를 콜스택으로 가져오면 이벤트 루프가 종료된다

-테스크 큐와 마이크로큐의 차이점 
웹 api를 이용해서 셋타임아웃을 호출했다 그다음 태스크 큐에 넣고 콜스택 이동 콜스택에서 수행
그다믕 다시 루프를 계속 계속 돈다 가끔씩 렌더쪽으로 와서 브라우저에 렌더처리를 하게된다 
그래서 무한정 코드가 반복되고 있음에도 불구하고 이벤트루프는 가끔만 렌더에 오기 때문에 동시에 실행될 수 있게
할 수 있다는 것 
 
마이크로 테스크 큐에서는 어떤 일이 발생할까 
큐 안에있는 아이들이 없어질 때까지 처리를 계속적으로함 

마이크로태스크는 이곳을 벗어나기 전까지 계속 머물러 있음 
그래서 정지 되는것처럼 됨

리퀘스트애니메이션프레임
리퀘스트 콜백을 호출하면서 순서대로 쌓인다 
이건 지금은 수행하지 않아도 되지만 나중에 적용해줄 것을 원할 때 사용하기도 함 

셋타임아웃은 한번 수행이 되고 그 다음 조금만 있다가 다음 루프때 수행하고 싶을 때 사용
셋타임아웃 0으로 
